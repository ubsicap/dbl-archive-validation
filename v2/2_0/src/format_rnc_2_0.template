# format

textFormatElement =
  element format {
    element versedParagraphs { xsd:boolean }
  }

audioFormatElement = # DCMI: format
  element format { audioSubelements}
  
audioSubelements = 
    element compression { audioCompressionEnum }? &
    element trackConfiguration { audioTrackEnum }? &
    element bitRate { xsd:integer }? &
    element bitDepth { xsd:integer }? &
    element samplingRate { xsd:integer }?

audioCompressionEnum = (
  "MP3"  |
  "FLAC" |
  "WAV" |
  "AAC"
)

audioTrackEnum = (
    "1/0 (Mono)"   |
    "Dual mono"    |
    "2/0 (Stereo)" |
    "5.1 Surround"
)

printFormatElement =
  element format {
    element pod { xsd:boolean } &
    element width { measurementString } &
    element height { measurementString } &
    element scale { xsd:string { pattern = "[1-9][0-9]{1,3}%" } } &
    element orientation { printOrientationEnum } &
    element color { printColorEnum } &
    element fonts { printFormatFontElement* }
  }

printOrientationEnum = (
  "portrait" |
  "landscape"
)

printColorEnum = (
  "CMYK" |
  "RGB"
)

printFormatFontElement =
  element font {
    attribute type { printFontEnum },
    text
  }

printFontEnum = (
  "OpenType" |
  "Other" |
  "Bitmap" |
  "TrueType" |
  "Type1"
)

videoFormatElement =
  element format {
    element container {"MP4"} &
      videoFormatVideoStream &
      videoFormatAudioStream? &
      videoFormatSubtitleStream?
    }

videoFormatVideoStream =
  element videoStream {
      element codec { xsd:string } &
      element bitRate { xsd:positiveInteger } &
      element frameRate { xsd:decimal } &
      element screenResolution { xsd:string {pattern="[1-9][0-9]{0,3}x[1-9][0-9]{0,3}"} }
  }

videoFormatAudioStream =
  element audioStream { audioSubelements }
 
videoFormatSubtitleStream = element subtitleStream { empty }

brailleFormatElement =
  element format {
    element contracted { xsd:boolean } &
    element libLouisConfig { xsd:string }
  }

%%insert format_text_rnc_2_0.template%%
