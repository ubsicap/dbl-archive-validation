# format

textFormatElement =
  element format {
    element versedParagraphs { xsd:boolean }
  }

audioFormatElement = # DCMI: format
  element format { audioSubelements}
  
audioSubelements = 
    element compression { audioCompressionEnum }? &
    element trackConfiguration { audioTrackEnum }? &
    element bitRate { xsd:integer }? &
    element bitDepth { xsd:integer }? &
    element samplingRate { xsd:integer }?

printFormatElement =
  element format {
    element pod { xsd:boolean } &
    element pageCount { xsd:positiveInteger } &
    element width { measurementString } &
    element height { measurementString } &
    element scale { percentageString } &
    element orientation { printOrientationEnum } &
    element color { printColorEnum } &
    element fonts { printFormatFontElement* } &
    element edgeSpace {
        element top { smallMeasurementString } &
        element bottom { smallMeasurementString } &
        element inside { smallMeasurementString } &
        element outside { smallMeasurementString }
        }
  }

printFormatFontElement =
  element font {
    attribute type { printFontEnum },
    text
  }

videoFormatElement =
  element format {
    element container {"MP4"} &
      videoFormatVideoStream &
      videoFormatAudioStream? &
      videoFormatSubtitleStream?
    }

videoFormatVideoStream =
  element videoStream {
      element codec { xsd:string } &
      element bitRate { xsd:positiveInteger } &
      element frameRate { xsd:decimal } &
      element screenResolution { screenResolution }
  }

videoFormatAudioStream =
  element audioStream { audioSubelements }
 
videoFormatSubtitleStream = element subtitleStream { empty }

brailleFormatElement =
  element format {
    element isContracted { xsd:boolean } &
    brailleLiblouisElement &
    brailleHyphenationDictionaryElement? &
    brailleNumberSignElement &
    brailleContinuousPoetryElement? &
    brailleContentElement &
    braillePageElement
  }

brailleLiblouisElement = element liblouis {
    element version { xsd:string } &
    element table {
        element source { xsd:string },
        element name { xsd:string }
    }
}

brailleHyphenationDictionaryElement = element hyphenationDictionary {
    attribute src { xsd:string },
    element name { xsd:string }
}

brailleNumberSignElement = element numberSign {
    element character { brailleString } &
    element useInMargin { xsd:boolean }
}

brailleContinuousPoetryElement = element continuousPoetry {
    element startIndicator { brailleString }? &
    element lineIndicator { brailleString }? &
    element lineIndicatorSpaced { "never" | "always" | "sometimes" } &
    element endIndicator { brailleString } ?
}

brailleContentElement = element content {
    element chapterNumberStyle {"lower" | "upper" } &
    element chapterHeadingsNumberFirst { xsd:boolean } &
    element versedParagraphs { xsd:boolean } &
    element verseSeparator { brailleString } &
    element includeIntros { xsd:boolean } &
    element footnotes {
        element callerSymbol{ brailleString }
    }? &
    element crossReferences {
        element callerSymbol{ brailleString }
    }? &
    element characterStyles {
        element emphasizedWord { brailleString }? &
        element emphasizedPassageStart { brailleString }? &
        element emphasizedPassageEnd { brailleString }?
    }?
}

braillePageElement = element page {
    element charsPerLine { xsd:positiveInteger } &
    element linesPerPage { xsd:positiveInteger } &
    element defaultMarginWidth { xsd:positiveInteger } &
    element versoLastLineBlank { xsd:boolean } &
    element carryLines { xsd:positiveInteger }
}

%%insert format_text_rnc_2_2.template%%
