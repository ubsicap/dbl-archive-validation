# metadata.rnc
# Generated from templates

default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

start = dblMetadataElement

dblMetadataElement = (translationMetadata | expressionMetadata | translationAndExpressionMetadata)

translationMetadata = textTranslationMetadata | audioTranslationMetadata

expressionMetadata = textExpressionMetadata | audioExpressionMetadata | printExpressionMetadata

translationAndExpressionMetadata = textTranslationAndExpressionMetadata | audioTranslationAndExpressionMetadata

textTranslationMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  translationCommonElements &
  fullLanguageElement &
  textTranslationTypeElement &
  textFormatElement
}

audioTranslationMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  translationCommonElements &
  shortLanguageElement &
  audioTranslationTypeElement &
  audioFormatElement
}

textExpressionMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  expressionCommonElements &
  shortLanguageElement &
  textExpressionTypeElement &
  textFormatElement
}

printExpressionMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  expressionCommonElements &
  shortLanguageElement &
  printExpressionTypeElement &
  printFormatElement
}

audioExpressionMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  expressionCommonElements &
  shortLanguageElement &
  audioExpressionTypeElement &
  audioFormatElement
}

textTranslationAndExpressionMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  translationAndExpressionCommonElements &
  fullLanguageElement &
  textTranslationAndExpressionTypeElement &
  textFormatElement
}

audioTranslationAndExpressionMetadata = element DBLMetadata {
  dblMetadataCommonAtts &
  translationAndExpressionCommonElements &
  fullLanguageElement &
  audioTranslationAndExpressionTypeElement &
  audioFormatElement
}

translationCommonElements = (
  commonElements &
  translationManifestElement &
  translationSourceElement
)

expressionCommonElements = (
  commonElements &
  promotionElement &
  nonTranslationManifestElement &
  publicationsElement &
  translationSourceElement?
)

translationAndExpressionCommonElements = (
  commonElements &
  promotionElement &
  translationManifestElement &
  publicationsElement &
  translationSourceElement
)

commonElements = (
  identificationElement &
  relationshipsElement &
  agenciesElement &
  countryElement &
  namesElement &
  copyrightElement &
  archiveStatusElement
)

dblMetadataCommonAtts = (
  attribute version { "2.0" } &
  attribute id { bundleIdString } &
  attribute revision { xsd:integer | "null" }
)

identificationElement =
  element identification {
    element name { lenGe2String } &
    element nameLocal { lenGe2String }? &
    element abbreviation { abbreviationString }? &
    element abbreviationLocal { localAbbreviationString }? &
    element description { lenGe2String } &
    element descriptionLocal { lenGe2String }? &
    element scope { scopeEnum } &

    element dateCompleted {
      xsd:date |
      xsd:gYear |
      xsd:gYearMonth |
      xsd:dateTime
    }? &
    (gbcSystemId | ptSystemId | reapSystemId | biblicaSystemId | tmsSystemId | ptregSystemId)+ &
    element bundleProducer { lenGe2String }
    }

scopeEnum = (
    "Bible" |
    "Bible with Deuterocanon" |
    "Deuterocanon" |
    "New Testament" |
    "New Testament+" |
    "Old Testament" |
    "Old Testament + Deuterocanon" |
    "Old Testament+" |
    "Portions" |
    "Selections" |
    "Shorter Bible"
)

gbcSystemId =
  element systemId {
    attribute type { "gbc" },
    gbcElements
  }

gbcElements =
  element id {
    gbcId
  }

ptregSystemId =
  element systemId {
    attribute type { "ptreg" },
    ptregElements
 }

tmsSystemId =
  element systemId {
    attribute type { "tms" },
    tmsElements
  }

tmsElements =
  element id {
    tmsId
  }

ptSystemId =
  element systemId {
    attribute type { "paratext" },
    ptElements
  }

ptElements =
  element name { lenGe2String } &
  element fullName { lenGe2String } &
  element csetId { lenGe2String } &
  element id { ptId }

ptregElements =
  element id { ptregId }

reapSystemId =
  element systemId {
    attribute type { "reap" },
    reapElements
  }

reapElements =
  element id { reapId }

biblicaSystemId =
  element systemId {
    attribute type { "biblica" },
    biblicaElements
  }

biblicaElements =
  element id { biblicaId }


relationshipsElement =
  element relationships {
    (sourceRelationElement | expressionRelationElement)*
  }

sourceRelationElement =
  element relation {
    attribute relationType { "source" },
    attribute type { "text" | "audio" },
    attribute id { bundleIdString },
    attribute revision { xsd:integer }
  }

expressionRelationElement =
  element relation {
    attribute relationType { "expression" },
    attribute type { "audio" | "print" },
    attribute id { bundleIdString },
    attribute revision { xsd:integer }
  }



agenciesElement =
  element agencies {
    rightsHolderElement+ &
    rightsAdminElement? &
    contributorElement+ &
    etenPartnerElement?
  }

rightsHolderElement =
  element rightsHolder {
    element abbr { lenGe2String } &
    element url { xsd:anyURI } &
    element local { lenGe2String } &
    element uid { agenciesUID } &
    element name { lenGe2String }
  }


rightsAdminElement =
  element rightsAdmin {
    element url { xsd:anyURI }? &
    element uid { agenciesUID } &
    element name { lenGe2String }
  }

contributorElement =
  element contributor {
    element content { xsd:boolean } &
    element publication { xsd:boolean }? &
    element management { xsd:boolean }? &
    element finance { xsd:boolean }? &
    element qa { xsd:boolean }? &
    element uid { agenciesUID } &
    element name { lenGe2String }
    }

etenPartnerElement =
  element etenPartner {
    element uid { lenGe2String }? &
    element name { lenGe2String }?
  }

fullLanguageElement =
  element language {
    commonLanguageElements &
    element script { iso15924String } &
    element scriptDirection { languageScriptDirectionEnum }
  }

shortLanguageElement =
  element language {
    commonLanguageElements &
    element script { iso15924String }? &
    element scriptDirection { languageScriptDirectionEnum }?
    }

commonLanguageElements = (
    element iso { languageIsoString } &
    element name { lenGe2String } &
    element nameLocal { lenGe2String }? &
    element ldml { ldmlString }? &
    element rod { rodString }? &
    element numerals { numeralSystemEnum }?
)

languageScriptDirectionEnum = (
  "LTR" | # Left to Right
  "RTL"   # RTL (Right to Left)
)
  
numeralSystemEnum = (
  "Arabic" | # (a.k.a. 'Hindu') = 0123456789
  "Bengali" |
  "Burmese" |
  "Devanagari" |
  "Ethiopic" |
  "Farsi" |
  "Gujarati" |
  "Gurmukhi" |
  "Hindi" | # (i.e. 'Arabic' as used in Egypt)
  "Kannada" |
  "Khmer" |
  "Malayalam" |
  "Oriya" |
  "Tamil" |
  "Telugu" |
  "Thai" |
  "Tibetan"
)


countryElement = element country {
  element iso { countryIsoString } &
  element name { lenGe2String } &
  element nameLocal { lenGe2String }?
}


textTranslationTypeElement =
  element type {
    element medium { "text" } &
    element hasCharacters { "true" } &
    element isTranslation { "true" } &
    element isExpression { "false" } &
    element isConfidential { xsd:boolean } &
    commonTextTranslationTypeElements
}

audioTranslationTypeElement =
  element type {
    element medium { "audio" } &
    element hasCharacters { "false" } &
    element isTranslation { "true" } &
    element isExpression { "false" } &
    element isConfidential { xsd:boolean } &
    commonAudioTranslationTypeElements
}

textExpressionTypeElement =
  element type {
    element medium { "text" } &
    element hasCharacters { "true" } &
    element isTranslation { "false" } &
    element isExpression { "true" } &
    commonTextExpressionTypeElements &
    element isConfidential { xsd:boolean }
}

printExpressionTypeElement =
  element type {
    element medium { "print" } &
    element hasCharacters { "true" } &
    element isTranslation { "false" } &
    element isExpression { "true" } &
    commonExpressionTypeElements &
    element isConfidential { xsd:boolean }
}

audioExpressionTypeElement =
  element type {
    element medium { "audio" } &
    element hasCharacters { "false" } &
    element isTranslation { "false" } &
    element isExpression { "true" } &
    commonAudioExpressionTypeElements &
    element isConfidential { xsd:boolean }
}

textTranslationAndExpressionTypeElement =
  element type {
    element medium { "text" } &
    element hasCharacters { "true" } &
    element isTranslation { "true" } &
    element isExpression { "true" } &
    commonTextTranslationTypeElements &
    commonTextExpressionTypeElements &
    element isConfidential { xsd:boolean }
}

audioTranslationAndExpressionTypeElement =
  element type {
    element medium { "audio" } &
    element hasCharacters { "false" } &
    element isTranslation { "true" } &
    element isExpression { "true" } &
    commonAudioTranslationTypeElements &
    commonAudioExpressionTypeElements &
    element isConfidential { xsd:boolean }
}

commonTextTranslationTypeElements = (
  commonTranslationTypeElements
)

commonAudioTranslationTypeElements = (
  commonTranslationTypeElements
)

commonTextExpressionTypeElements = (
  commonExpressionTypeElements
)

commonAudioExpressionTypeElements = (
  element dramatization {
    "Dramatized" |
    "Non-Dramatized" |
    "Single-Voice"
  } &
  commonExpressionTypeElements
)

commonTranslationTypeElements = (
  commonTypeElements &
  element translationType { translationTypeEnum } &
  element audience { translationLevelEnum }
)

commonExpressionTypeElements = (
  commonTypeElements
)

commonTypeElements = (
  empty
)

translationTypeEnum = (
  "First" |
  "New" |
  "Revision"
)

translationLevelEnum = (
  "Basic" |
  "Common" |
  "Common - Literary" |
  "Literary" |
  "Liturgical"
)


textFormatElement =
  element format {
    element versedParagraphs { xsd:boolean }
  }

audioFormatElement = # DCMI: format
  element format {
    element compression { audioCompressionEnum }? &
    element trackConfiguration { audioTrackEnum }? &
    element bitRate { xsd:integer }? &
    element bitDepth { xsd:integer }? &
    element samplingRate { xsd:integer }?
  }

audioCompressionEnum = (
  "MP3"  |
  "FLAC" |
  "WAV"
)

audioTrackEnum = (
    "1/0 (Mono)"   |
    "Dual mono"    |
    "2/0 (Stereo)" |
    "5.1 Surround"
)

printFormatElement =
  element format {
    element pod { xsd:boolean } &
    element width { measurementString } &
    element height { measurementString } &
    element scale { xsd:string { pattern = "[1-9][0-9]{1,3}%" } } &
    element orientation { printOrientationEnum } &
    element color { printColorEnum } &
    element fonts { printFormatFontElement* }
  }

printOrientationEnum = (
  "portrait" |
  "landscape"
)

printColorEnum = (
  "CMYK" |
  "RGB"
)

printFormatFontElement =
  element font {
    attribute type { printFontEnum },
    text
  }

printFontEnum = (
  "OpenType" | 
  "Other" |
  "Bitmap" |
  "TrueType" |
  "Type1"
)

namesElement =
  element names { namesName* }

namesName =
  element name {
    attribute id { nameIdString } &
    element long { lenGe2Le255String }? &
    element short { lenGe2Le255String } &
    element abbr { lenGe2Le255String }?
  }


nonTranslationManifestElement =
  element manifest { (nonTranslationManifestContainer | nonTranslationManifestResource)+ }

translationManifestElement =
  element manifest { (translationManifestContainer | translationManifestResource)+ }

nonTranslationManifestContainer =
  element container {
    attribute uri { xsd:anyURI },
    (nonTranslationManifestContainer | nonTranslationManifestResource)+
  }

nonTranslationManifestResource =
  element resource {
    commonManifestResourceAtts
  }

translationManifestContainer =
  element container {
    attribute uri { xsd:anyURI },
    (translationManifestContainer | translationManifestResource)+
  }

translationManifestResource =
  element resource {
    commonManifestResourceAtts &
    attribute progress { xsd:positiveInteger { maxInclusive = "999" } }?
  }

commonManifestResourceAtts = (
  attribute uri { xsd:anyURI},
  attribute size { xsd:integer },
  attribute checksum { md5String }?,
  attribute mimeType { mimeTypeString }
)


translationSourceElement =
  element source {
    empty |
    ( element canonicalContent { canonicalContentBook+} & (sourceStructureDivision | sourceStructureContent)+ )
  }

sourceStructureDivision =
  element division {
    attribute name {nameIdString},
    attribute role {roleId}?,
    (sourceStructureDivision | sourceStructureContent)+
  }

sourceStructureContent =
  element content {
    attribute name {nameIdString} &
    attribute src {srcPathString} &
    attribute role {roleId}?
  }


publicationsElement = # DCMI: tableOfContents
  element publications { publicationElement* }

publicationElement =
  element publication {
  attribute id { xsd:integer },
  attribute default { xsd:boolean }?,
  publicationChildElements
  }

publicationChildElements = (
  element name { lenGe2String }? &
  element nameLocal { lenGe2String }? &
  element abbreviation { lenGe2String }? &
  element abbreviationLocal { lenGe2String }? &
  element description { lenGe2String }? &
  element descriptionLocal { lenGe2String }? &
  publicationCountryElement? &
  element scope { scopeEnum }? &
  element canonicalContent { canonicalContentBook+} &
  element structure { (publicationStructureDivision | publicationStructureContent)+ }
)

publicationCountryElement = element country {
  element iso { countryIsoString } &
  element name { lenGe2String } &
  element nameLocal { lenGe2String }?
}

canonicalContentBook =
  element book {
    attribute code { canonicalBookIdEnum }
  }

publicationStructureDivision =
  element division {
    attribute name {nameIdString},
    attribute role {roleId}?,
    (publicationStructureDivision | publicationStructureContent)+
  }

publicationStructureContent =
  element content {
    attribute name {nameIdString} &
    attribute src {srcPathString} &
    attribute role {roleId}?
  }


copyrightElement =
  element copyright {
    copyrightStatementElement
  }

copyrightStatementElement =
  element statement {
    attribute contentType { "xhtml" },
    simplifiedHtml+
  }

promotionElement =
  element promotion {
    element promoVersionInfo {
      attribute contentType { "xhtml" },
      simplifiedHtml+
    }
  }



archiveStatusElement =
  element archiveStatus {
    element archivistName { lenGe2String } &
    element dateArchived { xsd:dateTime | "null" } &
    element dateUpdated { xsd:dateTime | "null" } &
    element comments { lenLe255String }
  }


  simplifiedHtml = (
    shP |
    shH1 |
    shH2 |
    shH3 |
    shUl |
    shOl |
    shBlockquote |
    shHtmlCharMarkup
)

shP = element p { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shH1 = element h1 { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shH2 = element h2 { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shH3 = element h3 { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shOl = element ol { shLi+ }

shUl = element ul { shLi+ }

shLi = element li { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shBlockquote = element blockquote { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shHtmlCharMarkup = (
  shA |
  shImg |
  shBr |
  shStrong |
  shB |
  shEm |
  shI
)

shA =
  element a {
    attribute href { xsd:anyURI },
    mixed { nonEmptyString* & shHtmlCharMarkup* }
  }

shImg =
  element img {
    attribute src { xsd:anyURI },
    attribute alt { lenGe1String }
  }

shBr = element br { empty }

shStrong = element strong { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shB = element b { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shEm = element em { mixed { nonEmptyString* & shHtmlCharMarkup* } }

shI = element i { mixed { nonEmptyString* & shHtmlCharMarkup* } }

nonEmptyString = xsd:string { minLength = "1" }

lenGe1String = xsd:string { minLength = "1" pattern="\S(.*\S)?" }

lenGe2String = xsd:string { minLength = "2" pattern="\S.*\S" }

lenGe2Le255String = xsd:string { minLength = "2" maxLength = "255" pattern="\S.*\S" }

lenLe255String = xsd:string { maxLength = "255" pattern="\S.*\S" }

bundleIdString = xsd:string { pattern = "[a-f0-9]{16}" }

agenciesUID = xsd:string { pattern = "[a-f0-9]{24}" }

abbreviationString = xsd:string { pattern = "[\-A-Za-z0-9]{2,12}" }

localAbbreviationString = xsd:string { minLength = "2" maxLength = "12" pattern="\S.*\S" }

languageIsoString = xsd:string { pattern = "[a-z][a-z][a-z]" }

ldmlString = xsd:string { pattern = "[A-Za-z]{2,3}([\-_][A-Za-z0-9]+){0,3}" }

iso15924String = ( # ISO 15924
  "Adlm" |
  "Afak" |
  "Aghb" |
  "Ahom" |
  "Arab" |
  "Aran" |
  "Armi" |
  "Armn" |
  "Avst" |
  "Bali" |
  "Bamu" |
  "Bass" |
  "Batk" |
  "Beng" |
  "Blis" |
  "Bopo" |
  "Brah" |
  "Brai" |
  "Bugi" |
  "Buhd" |
  "Cakm" |
  "Cans" |
  "Cari" |
  "Cham" |
  "Cher" |
  "Cirt" |
  "Copt" |
  "Cprt" |
  "Cyrl" |
  "Cyrs" |
  "Deva" |
  "Dsrt" |
  "Dupl" |
  "Egyd" |
  "Egyh" |
  "Egyp" |
  "Elba" |
  "Ethi" |
  "Geok" |
  "Geor" |
  "Glag" |
  "Goth" |
  "Gran" |
  "Grek" |
  "Gujr" |
  "Guru" |
  "Hang" |
  "Hani" |
  "Hano" |
  "Hans" |
  "Hant" |
  "Hatr" |
  "Hebr" |
  "Hira" |
  "Hluw" |
  "Hmng" |
  "Hrkt" |
  "Hung" |
  "Inds" |
  "Ital" |
  "Java" |
  "Jpan" |
  "Jurc" |
  "Kali" |
  "Kana" |
  "Khar" |
  "Khmr" |
  "Khoj" |
  "Kitl" |
  "Kits" |
  "Knda" |
  "Kore" |
  "Kpel" |
  "Kthi" |
  "Lana" |
  "Laoo" |
  "Latn" |
  "Latf" |
  "Latg" |
  "Lepc" |
  "Limb" |
  "Lina" |
  "Linb" |
  "Lisu" |
  "Loma" |
  "Lyci" |
  "Lydi" |
  "Mahj" |
  "Mand" |
  "Mani" |
  "Marc" |
  "Maya" |
  "Mend" |
  "Merc" |
  "Mero" |
  "Mlym" |
  "Modi" |
  "Mong" |
  "Moon" |
  "Mroo" |
  "Mtei" |
  "Mult" |
  "Mymr" |
  "Narb" |
  "Nbat" |
  "Nkgb" |
  "Nkoo" |
  "Nshu" |
  "Ogam" |
  "Olck" |
  "Orkh" |
  "Orya" |
  "Osge" |
  "Osma" |
  "Palm" |
  "Pauc" |
  "Perm" |
  "Phag" |
  "Phli" |
  "Phlp" |
  "Phlv" |
  "Phnx" |
  "Plrd" |
  "Prti" |
  "Rjng" |
  "Roro" |
  "Runr" |
  "Samr" |
  "Sara" |
  "Sarb" |
  "Saur" |
  "Sgnw" |
  "Shaw" |
  "Shrd" |
  "Sidd" |
  "Sind" |
  "Sinh" |
  "Sora" |
  "Sund" |
  "Sylo" |
  "Syrc" |
  "Syre" |
  "Syrj" |
  "Syrn" |
  "Tagb" |
  "Takr" |
  "Tale" |
  "Talu" |
  "Taml" |
  "Tang" |
  "Tavt" |
  "Telu" |
  "Teng" |
  "Tfng" |
  "Tglg" |
  "Thaa" |
  "Thai" |
  "Tibt" |
  "Tirh" |
  "Ugar" |
  "Vaii" |
  "Visp" |
  "Wara" |
  "Wole" |
  "Xpeo" |
  "Xsux" |
  "Yiii" |
  "Zinh" |
  "Zmth" |
  "Zsym" |
  "Zxxx" |
  "Zyyy" |
  "Zzzz"
  )

rodString = xsd:string { pattern = "[0-9]{5}" }

countryIsoString = xsd:string { pattern = "[A-Z][A-Z][A-Z]" }

measurementString = xsd:string { pattern = "[1-9][0-9]{1,4}mm" }

nameIdString = xsd:string { pattern = "[A-Za-z][\-A-Za-z0-9_]+" }

srcPathString = xsd:string { pattern = "[A-Za-z0-9][\-A-Za-z0-9_\.]+(/[A-Za-z0-9][\-A-Za-z0-9_\.]+)*" }

md5String = xsd:string { pattern = "[a-f0-9]{32}" }

mimeTypeString = xsd:string { pattern = "[\-a-z0-9]+/[\-a-z0-9+]+" }

percentageString = xsd:string { pattern = "[1-9][0-9]{1,3}%" }

biblicaId = xsd:string { pattern = "[1-9][0-9]{0,4}" }

gbcId = xsd:string { pattern = "[0-9a-f]{24}" }

tmsId = xsd:string { pattern = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" }

ptId = xsd:string { pattern = "[0-9a-f]{40}" }

ptregId = xsd:string { pattern = "[0-9a-zA-Z]{17}" }

reapId = xsd:anyURI

roleId = ptReference | knownRole | extensionRole

bookIdEnum = (canonicalBookIdEnum | nonCanonicalBookIdEnum)

canonicalBookIdEnum = (OTBookIdEnum | NTBookIdEnum | DCBookIdEnum)

OTBookIdEnum = (
  "GEN" | # Genesis
  "EXO" | # Exodus
  "LEV" | # Leviticus
  "NUM" | # Numbers
  "DEU" | # Deuteronomy
  "JOS" | # Joshua
  "JDG" | # Judges
  "RUT" | # Ruth
  "1SA" | # 1 Samuel
  "2SA" | # 2 Samuel
  "1KI" | # 1 Kings
  "2KI" | # 2 Kings
  "1CH" | # 1 Chronicles
  "2CH" | # 2 Chronicles
  "EZR" | # Ezra
  "NEH" | # Nehemiah
  "EST" | # Esther (Hebrew)
  "JOB" | # Job
  "PSA" | # Psalms
  "PRO" | # Proverbs
  "ECC" | # Ecclesiastes
  "SNG" | # Song of Songs
  "ISA" | # Isaiah
  "JER" | # Jeremiah
  "LAM" | # Lamentations
  "EZK" | # Ezekiel
  "DAN" | # Daniel (Hebrew)
  "HOS" | # Hosea
  "JOL" | # Joel
  "AMO" | # Amos
  "OBA" | # Obadiah
  "JON" | # Jonah
  "MIC" | # Micah
  "NAM" | # Nahum
  "HAB" | # Habakkuk
  "ZEP" | # Zephaniah
  "HAG" | # Haggai
  "ZEC" | # Zechariah
  "MAL"   # Malachi
)

NTBookIdEnum = (
  "MAT" | # Matthew
  "MRK" | # Mark
  "LUK" | # Luke
  "JHN" | # John
  "ACT" | # Acts
  "ROM" | # Romans
  "1CO" | # 1 Corinthians
  "2CO" | # 2 Corinthians
  "GAL" | # Galatians
  "EPH" | # Ephesians
  "PHP" | # Philippians
  "COL" | # Colossians
  "1TH" | # 1 Thessalonians
  "2TH" | # 2 Thessalonians
  "1TI" | # 1 Timothy
  "2TI" | # 2 Timothy
  "TIT" | # Titus
  "PHM" | # Philemon
  "HEB" | # Hebrews
  "JAS" | # James
  "1PE" | # 1 Peter
  "2PE" | # 2 Peter
  "1JN" | # 1 John
  "2JN" | # 2 John
  "3JN" | # 3 John
  "JUD" | # Jude
  "REV"   # Revelation
)

DCBookIdEnum = (
  "TOB" | # Tobit
  "JDT" | # Judith
  "ESG" | # Esther Greek
  "WIS" | # Wisdom of Solomon
  "SIR" | # Sirach (Ecclesiasticus)
  "BAR" | # Baruch
  "LJE" | # Letter of Jeremiah
  "S3Y" | # Song of 3 Young Men
  "SUS" | # Susanna
  "BEL" | # Bel and the Dragon
  "1MA" | # 1 Maccabees
  "2MA" | # 2 Maccabees
  "3MA" | # 3 Maccabees
  "4MA" | # 4 Maccabees
  "1ES" | # 1 Esdras (Greek)
  "2ES" | # 2 Esdras (Latin)
  "MAN" | # Prayer of Manasseh
  "PS2" | # Psalm 151
  "ODA" | # Odes
  "PSS" | # Psalms of Solomon
  "JSA" | # actual variant text for JOS, now in LXA text
  "JDB" | # actual variant text for JDG, now in LXA text
  "TBS" | # actual variant text for TOB, now in LXA text
  "SST" | # actual variant text for SUS, now in LXA text
  "DNT" | # actual variant text for DAN, now in LXA text
  "BLT" | # actual variant text for BEL, now in LXA text
  "EZA" | # Apocalypse of Ezra
  "5EZ" | # 5 Ezra
  "6EZ" | # 6 Ezra
  "DAG" | # Daniel Greek
  "PS3" | # Psalms 152-155
  "2BA" | # 2 Baruch (Apocalypse)
  "LBA" | # Letter of Baruch
  "JUB" | # Jubilees
  "ENO" | # Enoch
  "1MQ" | # 1 Meqabyan
  "2MQ" | # 2 Meqabyan
  "3MQ" | # 3 Meqabyan
  "REP" | # Reproof
  "4BA" | # 4 Baruch
  "LAO"   # Laodiceans
)

nonCanonicalBookIdEnum = (
  "XXA" | # Extra A, e.g. a hymnal
  "XXB" | # Extra B
  "XXC" | # Extra C
  "XXD" | # Extra D
  "XXE" | # Extra E
  "XXF" | # Extra F
  "XXG" | # Extra G
  "FRT" | # Front Matter
  "BAK" | # Back Matter
  "OTH" | # Other Matter
  "INT" | # Introduction
  "CNC" | # Concordance
  "GLO" | # Glossary
  "TDX" | # Topical Index
  "NDX"   # Names Index
)

ptReference = xsd:string { pattern = "[A-Z1-6]{3}|[A-Z1-6]{3} [1-9][0-9]*(-[1-9][0-9]*)?|[A-Z1-6]{3} [1-9][0-9]*:[1-9][0-9]*(-[1-9][0-9]*)?|[A-Z1-6]{3} [1-9][0-9]*:[1-9][0-9]*-[1-9][0-9]*:[1-9][0-9]*" }

knownRole = "sourceZip" | "sourceFile" | "lds" | "ldml" | "styles" | "vrs"

extensionRole = xsd:string { pattern = "X-[A-Za-z0-9][A-Za-z0-9\-]*" }
